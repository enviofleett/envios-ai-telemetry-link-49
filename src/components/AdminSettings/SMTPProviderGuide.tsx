
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  Mail, 
  ExternalLink, 
  CheckCircle, 
  AlertTriangle,
  Info,
  Copy,
  Shield,
  Zap,
  Globe
} from 'lucide-react';

interface ProviderConfig {
  name: string;
  host: string;
  port: number;
  use_ssl: boolean;
  use_tls: boolean;
  description: string;
  pricing: string;
  setupSteps: string[];
  dnsRecords: {
    spf: string;
    dkim: string;
    dmarc: string;
  };
  advantages: string[];
  testEmail?: string;
}

const providers: Record<string, ProviderConfig> = {
  resend: {
    name: 'Resend',
    host: 'smtp.resend.com',
    port: 587,
    use_ssl: false,
    use_tls: true,
    description: 'Modern email API designed for developers',
    pricing: '100 emails/day free, then $20/month for 50k emails',
    setupSteps: [
      'Sign up at resend.com',
      'Verify your email address',
      'Add and verify your domain',
      'Create an API key',
      'Configure DNS records'
    ],
    dnsRecords: {
      spf: 'v=spf1 include:_spf.resend.com ~all',
      dkim: 'Contact Resend support for DKIM configuration',
      dmarc: 'v=DMARC1; p=quarantine; rua=mailto:dmarc@yourdomain.com'
    },
    advantages: [
      'Developer-friendly API',
      'Built-in analytics',
      'High deliverability',
      'React email templates'
    ]
  },
  sendgrid: {
    name: 'SendGrid',
    host: 'smtp.sendgrid.net',
    port: 587,
    use_ssl: false,
    use_tls: true,
    description: 'Enterprise-grade email delivery platform',
    pricing: '100 emails/day free, then $19.95/month for 50k emails',
    setupSteps: [
      'Create SendGrid account',
      'Complete account verification',
      'Set up domain authentication',
      'Create API key with full access',
      'Configure sender identity'
    ],
    dnsRecords: {
      spf: 'v=spf1 include:sendgrid.net ~all',
      dkim: 'Auto-generated by SendGrid during domain setup',
      dmarc: 'v=DMARC1; p=quarantine; rua=mailto:dmarc@yourdomain.com'
    },
    advantages: [
      'Robust analytics',
      'Template management',
      'A/B testing',
      'High volume support'
    ]
  },
  ses: {
    name: 'Amazon SES',
    host: 'email-smtp.us-east-1.amazonaws.com',
    port: 587,
    use_ssl: false,
    use_tls: true,
    description: 'AWS-powered email service with high reliability',
    pricing: '$0.10 per 1,000 emails (very cost-effective)',
    setupSteps: [
      'Create AWS account',
      'Access SES console',
      'Verify domain identity',
      'Create SMTP credentials',
      'Request production access'
    ],
    dnsRecords: {
      spf: 'v=spf1 include:amazonses.com ~all',
      dkim: 'Auto-generated during domain verification',
      dmarc: 'v=DMARC1; p=quarantine; rua=mailto:dmarc@yourdomain.com'
    },
    advantages: [
      'Extremely cost-effective',
      'AWS integration',
      'High scalability',
      'Detailed metrics'
    ]
  },
  mailgun: {
    name: 'Mailgun',
    host: 'smtp.mailgun.org',
    port: 587,
    use_ssl: false,
    use_tls: true,
    description: 'Email automation service for developers',
    pricing: '5,000 emails free for 3 months, then $15/month',
    setupSteps: [
      'Sign up at mailgun.com',
      'Add your domain',
      'Verify domain ownership',
      'Get SMTP credentials',
      'Configure webhooks (optional)'
    ],
    dnsRecords: {
      spf: 'v=spf1 include:mailgun.org ~all',
      dkim: 'Auto-generated during domain setup',
      dmarc: 'v=DMARC1; p=quarantine; rua=mailto:dmarc@yourdomain.com'
    },
    advantages: [
      'Powerful API',
      'Email validation',
      'Inbox placement optimization',
      'European data centers'
    ]
  }
};

const SMTPProviderGuide: React.FC = () => {
  const [selectedProvider, setSelectedProvider] = useState<string>('resend');
  const [copiedText, setCopiedText] = useState<string>('');

  const provider = providers[selectedProvider];

  const copyToClipboard = (text: string, label: string) => {
    navigator.clipboard.writeText(text);
    setCopiedText(label);
    setTimeout(() => setCopiedText(''), 2000);
  };

  return (
    <div className="space-y-6">
      <div>
        <h3 className="text-lg font-semibold mb-2">SMTP Provider Setup Guide</h3>
        <p className="text-sm text-gray-600 mb-4">
          Choose and configure a reliable 3rd-party SMTP provider for your email delivery
        </p>
      </div>

      {/* Provider Selection */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Mail className="h-5 w-5" />
            Choose Your Provider
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {Object.entries(providers).map(([key, prov]) => (
              <div
                key={key}
                className={`border rounded-lg p-4 cursor-pointer transition-all ${
                  selectedProvider === key 
                    ? 'border-primary bg-primary/5' 
                    : 'border-gray-200 hover:border-gray-300'
                }`}
                onClick={() => setSelectedProvider(key)}
              >
                <div className="flex items-center justify-between mb-2">
                  <h4 className="font-medium">{prov.name}</h4>
                  {selectedProvider === key && (
                    <CheckCircle className="h-4 w-4 text-primary" />
                  )}
                </div>
                <p className="text-xs text-gray-600 mb-2">{prov.description}</p>
                <Badge variant="outline" className="text-xs">
                  {prov.pricing.split(',')[0]}
                </Badge>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Provider Details */}
      <Tabs defaultValue="setup" className="w-full">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="setup">Setup Steps</TabsTrigger>
          <TabsTrigger value="config">SMTP Config</TabsTrigger>
          <TabsTrigger value="dns">DNS Records</TabsTrigger>
          <TabsTrigger value="test">Testing</TabsTrigger>
        </TabsList>

        <TabsContent value="setup" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Zap className="h-5 w-5" />
                {provider.name} Setup Process
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <Alert>
                <Info className="h-4 w-4" />
                <AlertDescription>
                  <strong>Pricing:</strong> {provider.pricing}
                </AlertDescription>
              </Alert>

              <div className="space-y-3">
                <h4 className="font-medium">Step-by-step setup:</h4>
                <ol className="space-y-2">
                  {provider.setupSteps.map((step, index) => (
                    <li key={index} className="flex items-start gap-3">
                      <div className="w-6 h-6 rounded-full bg-primary text-primary-foreground text-sm flex items-center justify-center flex-shrink-0 mt-0.5">
                        {index + 1}
                      </div>
                      <span className="text-sm">{step}</span>
                    </li>
                  ))}
                </ol>
              </div>

              <div className="space-y-2">
                <h4 className="font-medium">Key Advantages:</h4>
                <ul className="space-y-1">
                  {provider.advantages.map((advantage, index) => (
                    <li key={index} className="flex items-center gap-2 text-sm">
                      <CheckCircle className="h-4 w-4 text-green-500" />
                      {advantage}
                    </li>
                  ))}
                </ul>
              </div>

              <Button 
                className="w-full" 
                onClick={() => window.open(`https://${selectedProvider === 'ses' ? 'aws.amazon.com/ses' : selectedProvider + '.com'}`, '_blank')}
              >
                <ExternalLink className="h-4 w-4 mr-2" />
                Go to {provider.name}
              </Button>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="config" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Shield className="h-5 w-5" />
                SMTP Configuration for {provider.name}
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <Alert>
                <AlertTriangle className="h-4 w-4" />
                <AlertDescription>
                  Use these exact settings in the SMTP Configuration form below. 
                  Make sure to get your username and password/API key from {provider.name}.
                </AlertDescription>
              </Alert>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-3">
                  <div className="flex justify-between items-center p-3 bg-gray-50 rounded">
                    <span className="text-sm font-medium">SMTP Host:</span>
                    <div className="flex items-center gap-2">
                      <code className="text-sm">{provider.host}</code>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => copyToClipboard(provider.host, 'host')}
                        className="h-6 w-6 p-0"
                      >
                        <Copy className="h-3 w-3" />
                      </Button>
                    </div>
                  </div>
                  
                  <div className="flex justify-between items-center p-3 bg-gray-50 rounded">
                    <span className="text-sm font-medium">SMTP Port:</span>
                    <div className="flex items-center gap-2">
                      <code className="text-sm">{provider.port}</code>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => copyToClipboard(provider.port.toString(), 'port')}
                        className="h-6 w-6 p-0"
                      >
                        <Copy className="h-3 w-3" />
                      </Button>
                    </div>
                  </div>

                  <div className="flex justify-between items-center p-3 bg-gray-50 rounded">
                    <span className="text-sm font-medium">Use SSL:</span>
                    <Badge variant={provider.use_ssl ? 'default' : 'outline'}>
                      {provider.use_ssl ? 'Yes' : 'No'}
                    </Badge>
                  </div>

                  <div className="flex justify-between items-center p-3 bg-gray-50 rounded">
                    <span className="text-sm font-medium">Use TLS:</span>
                    <Badge variant={provider.use_tls ? 'default' : 'outline'}>
                      {provider.use_tls ? 'Yes' : 'No'}
                    </Badge>
                  </div>
                </div>

                <div className="space-y-3">
                  <Alert>
                    <Info className="h-4 w-4" />
                    <AlertDescription className="text-xs">
                      <strong>Username:</strong> Get this from your {provider.name} account (usually your API key or email)
                      <br />
                      <strong>Password:</strong> Your {provider.name} API key or app password
                      <br />
                      <strong>From Email:</strong> Must be from your verified domain
                    </AlertDescription>
                  </Alert>
                </div>
              </div>

              {copiedText && (
                <Alert>
                  <CheckCircle className="h-4 w-4" />
                  <AlertDescription>
                    Copied {copiedText} to clipboard!
                  </AlertDescription>
                </Alert>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="dns" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Globe className="h-5 w-5" />
                DNS Configuration for {provider.name}
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <Alert>
                <Info className="h-4 w-4" />
                <AlertDescription>
                  Add these DNS records to your domain to improve email deliverability and prevent emails from being marked as spam.
                </AlertDescription>
              </Alert>

              <div className="space-y-4">
                <div className="p-4 border rounded-lg">
                  <div className="flex justify-between items-center mb-2">
                    <h4 className="font-medium">SPF Record</h4>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => copyToClipboard(provider.dnsRecords.spf, 'SPF record')}
                    >
                      <Copy className="h-4 w-4 mr-1" />
                      Copy
                    </Button>
                  </div>
                  <p className="text-xs text-gray-600 mb-2">Type: TXT | Name: @ | Value:</p>
                  <code className="text-xs bg-gray-100 p-2 rounded block">
                    {provider.dnsRecords.spf}
                  </code>
                </div>

                <div className="p-4 border rounded-lg">
                  <div className="flex justify-between items-center mb-2">
                    <h4 className="font-medium">DKIM Record</h4>
                    <Badge variant="outline">Auto-configured</Badge>
                  </div>
                  <p className="text-xs text-gray-600 mb-2">{provider.dnsRecords.dkim}</p>
                </div>

                <div className="p-4 border rounded-lg">
                  <div className="flex justify-between items-center mb-2">
                    <h4 className="font-medium">DMARC Record</h4>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => copyToClipboard(provider.dnsRecords.dmarc, 'DMARC record')}
                    >
                      <Copy className="h-4 w-4 mr-1" />
                      Copy
                    </Button>
                  </div>
                  <p className="text-xs text-gray-600 mb-2">Type: TXT | Name: _dmarc | Value:</p>
                  <code className="text-xs bg-gray-100 p-2 rounded block">
                    {provider.dnsRecords.dmarc}
                  </code>
                </div>
              </div>

              <Alert>
                <AlertTriangle className="h-4 w-4" />
                <AlertDescription className="text-xs">
                  DNS changes can take up to 48 hours to propagate. You can verify your DNS records using online tools like MXToolbox or dig commands.
                </AlertDescription>
              </Alert>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="test" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Testing Your Setup</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-3">
                <h4 className="font-medium">Testing Steps:</h4>
                <ol className="space-y-2 text-sm">
                  <li className="flex items-start gap-3">
                    <span className="w-6 h-6 rounded-full bg-blue-500 text-white text-xs flex items-center justify-center flex-shrink-0 mt-0.5">1</span>
                    Configure your SMTP settings using the values above
                  </li>
                  <li className="flex items-start gap-3">
                    <span className="w-6 h-6 rounded-full bg-blue-500 text-white text-xs flex items-center justify-center flex-shrink-0 mt-0.5">2</span>
                    Use the "Test Connection" button in the SMTP configuration form
                  </li>
                  <li className="flex items-start gap-3">
                    <span className="w-6 h-6 rounded-full bg-blue-500 text-white text-xs flex items-center justify-center flex-shrink-0 mt-0.5">3</span>
                    Send a test email to yourself using the email templates
                  </li>
                  <li className="flex items-start gap-3">
                    <span className="w-6 h-6 rounded-full bg-blue-500 text-white text-xs flex items-center justify-center flex-shrink-0 mt-0.5">4</span>
                    Check your email logs in the Email Templates tab for delivery status
                  </li>
                </ol>
              </div>

              <Alert>
                <CheckCircle className="h-4 w-4" />
                <AlertDescription>
                  <strong>Pro Tip:</strong> Start with a sandbox/test mode if available, then request production access once everything is working correctly.
                </AlertDescription>
              </Alert>

              <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                <h4 className="font-medium text-yellow-800 mb-2">Common Issues & Solutions:</h4>
                <ul className="text-xs text-yellow-700 space-y-1">
                  <li>• <strong>Authentication Failed:</strong> Double-check your API key and username</li>
                  <li>• <strong>Connection Timeout:</strong> Verify SMTP host and port settings</li>
                  <li>• <strong>Emails go to Spam:</strong> Ensure DNS records are properly configured</li>
                  <li>• <strong>Rate Limiting:</strong> Check your provider's sending limits</li>
                </ul>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default SMTPProviderGuide;
